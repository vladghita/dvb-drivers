diff --git a/drivers/media/rc/rc-main.c b/drivers/media/rc/rc-main.c
index dcf20d9..f45f264 100644
--- a/drivers/media/rc/rc-main.c
+++ b/drivers/media/rc/rc-main.c
@@ -18,11 +18,14 @@
 #include <linux/input.h>
 #include <linux/leds.h>
 #include <linux/slab.h>
-#include <linux/idr.h>
 #include <linux/device.h>
 #include <linux/module.h>
 #include "rc-core-priv.h"
 
+/* Bitmap to store allocated device numbers from 0 to IRRCV_NUM_DEVICES - 1 */
+#define IRRCV_NUM_DEVICES      256
+static DECLARE_BITMAP(ir_core_dev_number, IRRCV_NUM_DEVICES);
+
 /* Sizes are in bytes, 256 bytes allows for 32 entries on x64 */
 #define IR_TAB_MIN_SIZE	256
 #define IR_TAB_MAX_SIZE	8192
@@ -36,9 +39,6 @@ static LIST_HEAD(rc_map_list);
 static DEFINE_SPINLOCK(rc_map_lock);
 static struct led_trigger *led_feedback;
 
-/* Used to keep track of rc devices */
-static DEFINE_IDA(rc_ida);
-
 static struct rc_map_list *seek_rc_map(const char *name)
 {
 	struct rc_map_list *map = NULL;
@@ -1424,9 +1424,13 @@ int rc_register_device(struct rc_dev *dev)
 	if (dev->close)
 		dev->input_dev->close = ir_close;
 
-	minor = ida_simple_get(&rc_ida, 0, RC_DEV_MAX, GFP_KERNEL);
-	if (minor < 0)
-		return minor;
+	do {
+		minor = find_first_zero_bit(ir_core_dev_number,
+					    IRRCV_NUM_DEVICES);
+		/* No free device slots */
+		if (minor >= IRRCV_NUM_DEVICES)
+			return -ENOMEM;
+	} while (test_and_set_bit(minor, ir_core_dev_number));
 
 	dev->minor = minor;
 	dev_set_name(&dev->dev, "rc%u", dev->minor);
@@ -1520,7 +1524,7 @@ out_table:
 out_dev:
 	device_del(&dev->dev);
 out_unlock:
-	ida_simple_remove(&rc_ida, minor);
+	clear_bit(dev->minor, ir_core_dev_number);
 	return rc;
 }
 EXPORT_SYMBOL_GPL(rc_register_device);
@@ -1544,7 +1548,7 @@ void rc_unregister_device(struct rc_dev *dev)
 
 	device_del(&dev->dev);
 
-	ida_simple_remove(&rc_ida, dev->minor);
+	clear_bit(dev->minor, ir_core_dev_number);
 
 	rc_free_device(dev);
 }
